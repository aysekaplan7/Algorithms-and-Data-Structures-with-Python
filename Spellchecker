from collections.abc import MutableMapping
from random import randrange
import requests

class MapBase(MutableMapping):
    
    class _Item:
        __slots__ = '_key','_value'
        
        def __init__(self,k,v):
            self._key = k
            self._value = v
        
        def __eq__(self,other):
            return self._key == other._key
        
        def __ne__(self,other):
            return not (self == other)
        
        def __lt__(self,other):
            return self._key < other._key
            
class UnsortedTableMap(MapBase):
    
    def __init__(self):
        self._table = []
    
    def __getitem__(self,k):
        for item in self._table:
            if k == item._key:
                return item._value
        raise KeyError('Key Error: ' + repr(k))
    
    def __setitem__(self,k,v):
        for item in self._table:
            if k == item._key:
                item._value = v
                return
        self._table.append(self._Item(k,v))
    
    def __delitem__(self,k):
        for j in range(len(self._table)):
            if k == self._table[j]._key:
                self._table.pop(j)
                return
        raise KeyError('Key Error: ' + repr(k))
    
    def __len__(self):
        return len(self._table)
    
    def __iter__(self):
        for item in self._table:
            yield item._key

class HashMapBase(MapBase):
    
    def __init__(self,cap=11,p=109345121):
        self._table = cap*[None]
        self._n = 0
        self._prime = p
        self._scale = 1 + randrange(p-1)
        self._shift = randrange(p)
    
    def _hash_function(self,k):
        return (hash(k) * self._scale + self._shift) % self._prime % len(self._table)
    
    def __len__(self):
        return self._n
   
    def __getitem__(self,k):
        j = self._hash_function(k)
        return self._bucket_getitem(j,k)
    
    def __setitem__(self,k,v):
        j = self._hash_function(k)
        self._bucket_setitem(j,k,v)
        if self._n > len(self._table) // 2:
            self._resize(2 * len(self._table) - 1)
    
    def __delitem__(self,k):
        j = self._hash_function(k)
        self._bucket_delitem(j)
        self._n -= 1
    
    def _resize(self,c):
        old = list(self.items())
        self._table = c* [None]
        self._n = 0
        for (k,v) in old:
            self[k] = v

class ChainHashMap(HashMapBase):

    
    def _bucket_getitem(self,j,k):
        bucket = self._table[j]
        if bucket is None:
            raise KeyError('Key Error: ' + repr(k))
        return bucket[k]
    
    def _bucket_setitem(self,j,k,v):
        if self._table[j] is None:
            self._table[j] = UnsortedTableMap()
        oldsize = len(self._table[j])
        self._table[j][k] = v
        if len(self._table[j]) > oldsize:
            self._n += 1
    
    def _bucket_delitem(self,j,k):
        bucket = self._table[j]
        if bucket is None:
            raise KeyError('Key Error: ' + repr(k))
        del bucket[k]
    
    def __iter__(self):
        for bucket in self._table:
            if bucket is not None:
                for key in bucket:
                    yield key
                    
class SpellChecker():
    
    def __init__(self):
        self.dictionary = ChainHashMap()
        url = "https://raw.githubusercontent.com/first20hours/google-10000-english/master/google-10000-english.txt"
        page = requests.get(url)
        stir = ""
        for line in page.text:
            if line != "\n":
                stir = stir + line
            else:
                if len(stir)>=6:
                    self.dictionary[stir]=None
                stir=""
        
    def check(self,path):
        fp = open(path)
        self._liste = []
        self._dicti = {}
        alphabet_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
        for line in fp.readlines():
            self._liste.append(line.rstrip("\n"))
            for i in self._liste:
                liste1 = i.split(" ")
                for k in liste1:
                    self._dicti[k] = []
        for key in self._dicti:
            if key in self.dictionary:
                self._dicti[key].append("OK")
            else:
                self._trial_set = []
                i = 0
                while i < len(key)-1:
                    for j in alphabet_list:
                        a = key[:i+1] + j + key[i+1:]
                        self._trial_set.append(a)
                    i +=1
                j = 0
                while j < len(key):
                    a = key[:j] + key[j+1:]
                    self._trial_set.append(a)
                    j += 1
                for k in self._trial_set:
                    if k in self.dictionary:
                        if self._dicti[key] == []:
                            self._dicti[key] = [k]
                        else:
                            if len(self._dicti[key]) < 2:
                                if k not in self._dicti[key]:
                                    self._dicti[key].append(k)
            if self._dicti[key]==[]:
                self._dicti[key].append("No Recommendation")
                    
        file = open("Assignment3Output.txt","x")
        for i in self._dicti:
            file.write(i + " --> " + ", ".join(self._dicti[i]) + "\n")
        file.close()
